<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Unlimited IBN5100 Works]]></title>
  <link href="http://caoyx.me/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://caoyx.me/"/>
  <updated>2014-12-07T19:08:14+08:00</updated>
  <id>http://caoyx.me/</id>
  <author>
    <name><![CDATA[Pierce]]></name>
    <email><![CDATA[i@caoyx.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[交大毕业生证件照批量抓取]]></title>
    <link href="http://caoyx.me/blog/2014/12/07/jiao-da-bi-ye-sheng-zheng-jian-zhao-pi-liang-zhua-qu/"/>
    <updated>2014-12-07T18:24:23+08:00</updated>
    <id>http://caoyx.me/blog/2014/12/07/jiao-da-bi-ye-sheng-zheng-jian-zhao-pi-liang-zhua-qu</id>
    <content type="html"><![CDATA[<p>交大的毕业照都是委托一家叫<a href="http://spring-pic.com/">潮源数码</a>的小公司拍摄的，下载自己的照片也在这个网站。简单看了一下这个简陋的网站的下载照片处，虽然有填写身份证号的地方，但观察下传参就能发现仅对姓名和学号是否一致进行了判断。这样只需要有姓名和学号的名单，就可以写脚本抓取所有毕业生的照片。</p>

<p>首先想到的是交大研究生院网站，果然一找就能找到，比如 <a href="http://www.gs.sjtu.edu.cn/inform/attachment/2011/20110902_002310_077.xls">11级</a> <a href="http://www.gs.sjtu.edu.cn/inform/attachment/2012/20120702_145958_344.xls">12级</a> 下载后整理成学号+姓名的纯文本即可。</p>

<p>python脚本如下，注意编码问题，GBK与UTF-8的互相转换。</p>

<p>```</p>

<h1>coding=gbk</h1>

<p>import os
import urllib
import urllib2
import re
from threading import Thread<br/>
from Queue import Queue</p>

<h1>q is the task queue</h1>

<h1>NUM is the sum of threads</h1>

<p>q = Queue()<br/>
NUM = 10
data_file_name = &lsquo;list.txt&rsquo;
login_url = &lsquo;<a href="http://spring-pic.com/info/Management.asp">http://spring-pic.com/info/Management.asp</a>&rsquo;
pic_pattern = &lsquo;a href=&ldquo;../Images/UpPhoto/(.<em>?)&rdquo;&rsquo;
pic_base_url = &lsquo;<a href="http://spring-pic.com/Images/UpPhoto/">http://spring-pic.com/Images/UpPhoto/</a>&rsquo;
str_pattern = &lsquo;学校名称：</td>.</em>?font_1">(.<em>?)&lt;.</em>?：.<em>?font_1">(.</em>?)&lt;.<em>?：.</em>?font_1">(.<em>?)&lt;.</em>?：.<em>?font_1">(.</em>?)&lt;&rsquo;
save_dir = r'/Users/pierce/Downloads/temp/'</p>

<p>def save_image(dir,image_name,image):</p>

<pre><code>if not os.path.isdir(dir):
    os.makedirs(dir)
try:
    image_file = open(dir + image_name,'wb')
except IOError as (error, strerror):
    print "I/O error({0}):{1}".format(error,strerror)
else:
    image_file.write(image)
    image_file.close()
</code></pre>

<p>def get_image(name,student_no,pattern):</p>

<pre><code>#Configure opener to handle cookies
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
urllib2.install_opener(opener)
#Build Parameters
params = urllib.urlencode({'daimaxuehao':student_no,'realname':name,'sfzh':'','SchoolID':10248,'action':'sub','imageField.x':16,'imageField.y':16})
#Open login html
f = opener.open(login_url,params)
login_html = f.read()
f.close()
#Search the image link
m = re.search(pattern,login_html)
#The student hasn't taken picture
if m is None:
    return None
else:
    n = re.search(str_pattern, login_html, re.DOTALL)
    if n is not None:
        school_name = n.group(1)
        department = n.group(2)
        major = n.group(3)
        class_no = n.group(4)
        #Get the image    
        match_part = m.group(1)
        f = opener.open(pic_base_url + match_part)
        image = f.read()
        return (school_name, department, major, class_no, image)
</code></pre>

<p>def add_tasks(queue, data_file_name):</p>

<pre><code>data_file = open(data_file_name, 'r')
lines = data_file.readlines()
for line in lines:
    items = line.split()
    q.put(items)
</code></pre>

<p>def grab(arguments):</p>

<pre><code>student_no = arguments[0]
name = arguments[1]
items = get_image(name,student_no,pic_pattern)
if items is not None:
    (school_name, department, major, class_no, image) = items
    school_name = school_name.decode("gbk").encode("utf-8")
    department = department.decode("gbk").encode("utf-8")
    name = name.decode("gbk").encode("utf-8")
    major = major.decode("gbk").encode("utf-8")
    save_image(save_dir,school_name+'_'+department+'_'+class_no+'_'+student_no + '_' + name +'_'+major+ '.jpg',image)
    print student_no + '_' + name + '.jpg' + ' is saved'
else:
    name = name.decode("gbk").encode("utf-8")
    print student_no + '\t' + name + ' no photo'
</code></pre>

<p>add_tasks(q, data_file_name)</p>

<h1>working thread,deal with the data from queue</h1>

<p>def working():</p>

<pre><code>while True:
    arguments = q.get()
    grab(arguments)
    q.task_done()  
</code></pre>

<h1>fork NUM threads</h1>

<p>for i in range(NUM):</p>

<pre><code>t = Thread(target=working)
t.setDaemon(True)
t.start()
</code></pre>

<p>```</p>

<p><img src="images/custom/20141207.jpg" alt="Alt text" /></p>
]]></content>
  </entry>
  
</feed>
